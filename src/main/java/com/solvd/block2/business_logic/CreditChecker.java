package com.solvd.block2.business_logic;

import com.solvd.block2.observers.*;
import com.solvd.block2.sql.models.*;
import com.solvd.block2.sql.services.ICustomerService;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.sql.Date;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

public class CreditChecker {

    private static final Logger LOGGER = LogManager.getLogger(CreditChecker.class);

    private List<CustomerObserver> customerObservers = new ArrayList<>();
    private List<AccountObserver> accountObservers = new ArrayList<>();
    private List<DebitCardObserver> debitCardObservers = new ArrayList<>();
    private List<CreditCardObserver> creditCardObservers = new ArrayList<>();
    private List<LoanObserver> loanObservers = new ArrayList<>();

    private final ICustomerService customerService;

    public CreditChecker(ICustomerService customerService) {
        this.customerService = customerService;
    }

    // Register observers
    public void registerCustomerObserver(CustomerObserver observer) {
        customerObservers.add(observer);
    }

    public void registerAccountObserver(AccountObserver observer) {
        accountObservers.add(observer);
    }

    public void registerDebitCardObserver(DebitCardObserver observer) {
        debitCardObservers.add(observer);
    }

    public void registerCreditCardObserver(CreditCardObserver observer) {
        creditCardObservers.add(observer);
    }

    public void registerLoanObserver(LoanObserver observer) {
        loanObservers.add(observer);
    }

    // Notify all observers

    private void notifyCustomerObservers(Customer customer) {
        for (CustomerObserver observer : customerObservers) {
            observer.onCustomerCreated(customer);
        }
    }

    private void notifyAccountObservers(Account account) {
        for (AccountObserver observer : accountObservers) {
            observer.onAccountCreated(account);
        }
    }

    private void notifyDebitCardObservers(DebitCard debitCard) {
        for (DebitCardObserver observer : debitCardObservers) {
            observer.onDebitCardCreated(debitCard);
        }
    }

    private void notifyCreditCardObservers(CreditCard creditCard) {
        for (CreditCardObserver observer : creditCardObservers) {
            observer.onCreditCardCreated(creditCard);
        }
    }

    private void notifyLoanObservers(Loan loan) {
        for (LoanObserver observer : loanObservers) {
            observer.onLoanCreated(loan);
        }
    }


    public void checkCreditScore(Customer customer, int creditScore) throws SQLException {
        if (creditScore >= 700) {

            LOGGER.info("Credit approved for an account!");

            // Insert new customer to the database
            customerService.createCustomer(customer);
            // Create an array of all customers in order to check the last added customer
            List<Customer> customers = customerService.getAllCustomers();
            // Get the last added customer in the customers list
            Customer lastAddedCustomer = customers.get(customers.size() - 1);
            // Get the customerId of the last added customer
            int lastAddedCustomerId = lastAddedCustomer.getCustomerId();
            // Add the new customerId generated by mysql to our customer object
            customer.setCustomerId(lastAddedCustomerId);
            // Notify the observers
            notifyCustomerObservers(customer);

            // Create an account
            Account account = new Account();
            // Set all account attributes ready for the database
            account.setAccountType(RandomHelper.getRandomAccountType());
            account.setBalance(RandomHelper.getRandomAccountBalance());
            account.setOpenDate(Date.valueOf(LocalDate.now()));
            account.setLastTransactionDate(Date.valueOf(LocalDate.now()));
            account.setBranchId(RandomHelper.getRandomBranchId());

            // Insert new account into database
            customerService.createAccount(account);
            // Notify the observers
            notifyAccountObservers(account);

            // Create a debit card
            DebitCard debitCard = new DebitCard();
            // Set all debit card attributes ready for the database
            debitCard.setCustomerId(lastAddedCustomerId);
            debitCard.setCardNumber(RandomHelper.generateRandomCardNumber());
            debitCard.setExpirationDate(RandomHelper.generateRandomExpiryDate());
            // Insert into database
            customerService.createDebitCard(debitCard);
            // Notify the observers
            notifyDebitCardObservers(debitCard);

            // Create a credit card
            if (creditScore >= 750) {

                LOGGER.info("Credit approved for Credit Card!");

                CreditCard creditCard = new CreditCard();
                // Set all credit card attributes ready for the database
                creditCard.setCustomerId(lastAddedCustomerId);
                creditCard.setCreditCardNumber(RandomHelper.generateRandomCardNumber());
                creditCard.setExpiryDate(RandomHelper.generateRandomExpiryDate());
                creditCard.setCreditLimit(RandomHelper.getRandomCreditLimit());
                creditCard.setOutstandingBalance(0); // All new credit cards start with an outstanding balance of 0
                // Insert into database
                customerService.createCreditCard(creditCard);
                // Notify the observers
                notifyCreditCardObservers(creditCard);
            }

            // Get a loan
            if (creditScore >= 800) {

                LOGGER.info("Credit approved for Loans!");

                Loan loan = new Loan();
                // Set all loan attributes ready for the database
                loan.setCustomerId(lastAddedCustomerId);
                loan.setLoanType(RandomHelper.getRandomLoanType());
                loan.setLoanAmount(RandomHelper.getRandomLoanAmount());
                loan.setInterestRate(RandomHelper.getRandomInterestRate());
                loan.setStartDate(Date.valueOf(LocalDate.now()));
                // Add different years to the end of the loan depending on the loan type
                if (loan.getLoanType().equals("Car Loan")) {
                    loan.setEndDate(Date.valueOf(LocalDate.now().plusYears(7)));
                } else if (loan.getLoanType().equals("Home Loan")) {
                    loan.setEndDate(Date.valueOf(LocalDate.now().plusYears(30)));
                }
                // Insert into database
                customerService.createLoan(loan);
                // Notify the observers
                notifyLoanObservers(loan);
            }


        } else {
            LOGGER.info("Credit score is too low to apply for an account.");
            LOGGER.info("Customer: " + customer.getFirstName() + " " + customer.getLastName());
            LOGGER.info("Credit Score: " + creditScore);

        }
    }
}